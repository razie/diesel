/*Generated by DSLFORGE*/

grammar Nvp1;

options {
  language=JavaScript;
  output=AST;
  ASTLabelType=CommonTree;
}

@lexer::header {
}

@parser::header {
}




// file extension .nvp1

rule_DomainModel:
    elements+=rule_AbstractElement* EOF!;




rule_AbstractElement:
    rule_Expect | rule_Msg | rule_Match | rule_When | rule_Receive | rule_Flow | rule_Option | rule_Val | rule_Mock | rule_Topic | rule_Braq | TEXT;




//-------------------- raz

rule_Receive:
    '$receive' ('<' stype=rule_MsgStereo '>')? name=rule_QualifiedName attrs=rule_AttrSpecs? NEWLINE
;




rule_Msg:
    '$msg' ('<' stype=rule_MsgStereo '>')? name=rule_QualifiedName attrs=rule_AttrSpecs? NEWLINE
;




rule_When:
	'$when' a=ID aa=rule_Attrs? cond=rule_Condition? ARROW z=ID za=rule_AttrSpecs?  NEWLINE
	( ARROW z=ID za=rule_AttrSpecs? NEWLINE )*
;




rule_Match:
	'$match' a=ID aa=rule_Attrs? cond=rule_Condition?  NEWLINE
;




rule_Mock:
	'$mock' a=ID aa=rule_Attrs? cond=rule_Condition? '=>' za=rule_AttrSpecs? NEWLINE
	( '=>' za=rule_AttrSpecs? NEWLINE )* 
;




rule_Flow:
	'$flow' a=ID aa=rule_Attrs? cond=rule_Condition? '=>' expr=rule_FlowExprA  NEWLINE
;




rule_FlowExprA:
  a=rule_FlowExprP ( '+' b+=rule_FlowExprP)*
;




rule_FlowExprP:
  a=rule_FlowExprT ('|' b+=rule_FlowExprT)*
;




rule_FlowExprT:
  m=ID | '(' rule_FlowExprA ')'
;




rule_Expect:
    rule_ExpectM | rule_ExpectV
;




rule_Condition:
    '$if' attrs=rule_AttrSpecs
;




rule_ExpectM:
//    '$expect' ('msg' name=QualifiedName attrs=AttrSpecs?) (cond=Condition?) NEWLINE
    '$expect' (name=rule_QualifiedName attrs=rule_AttrSpecs?) (cond=rule_Condition)?NEWLINE
;




rule_ExpectV:
//    '$expect' ('val' p=AttrSpec?) (cond=Condition?) NEWLINE
    '$expect' p=rule_AttrSpecs (cond=rule_Condition)?NEWLINE
;




rule_Val:
    '$val' p=rule_AttrSpec NEWLINE
;




rule_Option:
    '$opt' attr=rule_AttrSpec NEWLINE
;




rule_AttrSpec:
  name=rule_QualifiedName (':' ttype=rule_DataType)? ('=' eexpr=rule_EXPR)?;




rule_Attr:
  name=ID (':' ttype=rule_DataType)? ('=' eexpr=rule_EXPR)?;




rule_EXPR:
  parm=rule_QualifiedName | svalue=STRING | ivalue=INT;



//  parm=[Attr|QualifiedName] | svalue=STRING | ivalue=INT;
  
rule_Attrs:
    '(' (attrs+=rule_Attr (',' attrs+=rule_Attr)*)? ')'
;




rule_AttrSpecs:
   '(' (attrs+=rule_AttrSpec (',' attrs+=rule_AttrSpec)*)? ')'
;




rule_Topic:
    '[[' name=rule_QualifiedName (':' t=rule_QualifiedName)? ']]'
;




rule_Braq:
    '}'
;




//TypeRef:
//    referenced=[Type|QualifiedName] multi?='*'?;

rule_QualifiedNameWithWildCard:
    rule_QualifiedName '.*'?;




rule_QualifiedName:
    ID ('.' ID)*;


rule_DataType:
	string='String' | int='Int' | date='Date';


rule_MsgStereo:
	gET='GET' | pOST='POST' | camel='Camel' | jS='JS' | java='Java';


ID : ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* ;

STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

COMMENT : ('/*' .* '*/' | '//' ~('\r' | '\n')*)   { $channel = HIDDEN; } ;

WS:  (' '|'\r'|'\t'|'\u000C'|'\n') {$channel=HIDDEN;} ;

//NUMBER: INT ('.' INT)?;

INT: ('0'..'9')+;

